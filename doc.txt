## Node.js Blog Projcet
1. 创建 node-blog-demo 项目
2. 创建 .gitignore
	2.1 忽略 .idea
	2.2 忽略 node_modules
3. 创建 README.md 
4. 创建 package.json，根目录下执行 cmd: npm init，修改 main: app.js
5. 创建 /app.js 文件
6. 创建目录 views
7. 创建文件 views/default.html，项目的首页，有登录链接和注册链接
8. 创建文件 views/sign-in.html，views/sign-up.html，含有登录和注册的表单
9. 安装 modules: express, mysql, body-parser，根目录下执行命令 cmd: cnmp i -S express mysql body-parser
10. 修改 app.js 文件，创建简单的服务器
11. 启动服务，根目录下 cmd: supervisor app[.js]
12. 引入核心模块 path
13. 配置首页的路由，修改 app.js 文件，app.get('/', (req, res){});
14. 配置注册页和登录页链接的路由，修改 app.js 文件，app.get('/sign-up', (req, res){});
15. 配置注册请求路由，修改 app.js 文件，app.post('/signUp',...)
16. 引入 body-parser，配置 body-parser 中间件，获取表单信息：req.body.username; req.body.password
17. 引入 mysql，创建连接池 pool
18. 创建文件 sql/db.sql 建库: blog 建表: user id;username;password 
19. 数据库处理，保存用户名和密码
20. 返回响应，注册成功，去向 views/sign-in.html
21. 配置登录路由
	21.1 请求表单 action="/signIn"
	21.2 创建路由 app.post('/signIn', ...);
	21.3 获取表单参数
	21.4 数据库处理，查询
	21.5 返回响应，登录成功，去向 views/index.html
22. 创建项目主页：views/index.html
23. 创建数据库表 username 字段的唯一性约束
24. 注册时，验证用户名是否存在，存在返回注册页，不存在继续注册
25. 密码加密，安装项目依赖，cmd: cnpm i -S bcryptjs
25. 注册时对明文密码加密，先生成盐，再加密后存入数据库
26. 修改登录的业务逻辑：先根据用户名查加密后的密码，再做判断
27. 使用模板引擎，安装项目依赖，cmd: cnpm i -S ejs，做一个示例
28. 修改 app.js 文件，引入 EJS，配置 EJS 相关的中间件
29. 使用模板，方法是：res.render('*.html', {key:value});
30. 注册失败，提示用户名存在
31. 修改 views/sign-up.html 添加提示信息变量
32. 返回页面的方式改为：res.render('', {message:''});\
33. 页面跳转改为 res.render() 方式
34. 重构，创建路由目录 routes
33. 使用 express session，安装项目依赖，cmd: cnpm i -S express-session
34. app.js 中引入 express-session
35. app.js 中设置 session 中间件
36. 使用 session：req.session.key = value;
37. 注销，修改 index.html，添加注销链接
38. 修改 user.js，处理注销的 get 请求：req.session.destroy();
39. 创建数据库表 article，博文表
40. 修改 views/index.html，添加发布博文的表单
41. 创建 routes/article.js 文件，app.js 中引入。处理跟博文有关的所有请求
42. 处理添加博文的请求
43. 添加查询所有博文功能，在 index.html 上显示博文列表
44. Mysql属性 dateStrings: date，显示时间的格式

## Github
1. 创建 node-blog-demo 项目
2. 创建 .gitignore
	2.1 忽略 .idea
	2.2 忽略 node_modules
3. 创建 README.md，项目信息 
4. 系统用户目录下，创建 .gitconfig
	[user]
		name = github 用户名
		email = github 注册邮箱
5. .gitconfig 可以在 webstorm 里创建，放到系统用户目录下
6. 配置 webstorm
	6.1 下载 Git，http://git-scm.com
	6.2 安装 Git，默认选项
	6.3 File-Settings-Version Control-Git 配置 git，Test 
	6.4 File-Settings-Version Control-GitHub 
	6.5 Auth-Type: Password
	6.6 填写用户名 Login 和密码 Password，Test
7. 向 Github 提交项目，菜单 VCS-Import into Version Control-Share Project on Github-Share
8. 项目修改后，提交快捷键 Ctrl+K，提交时选择 Commit and Push-Push